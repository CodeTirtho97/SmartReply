name: Keep SmartReply Backend Alive

on:
  schedule:
    # Ping every 10 minutes during active hours (6 AM to 11 PM UTC)
    - cron: '*/55 6-23 * * *'
    # Ping every 30 minutes during off hours (11 PM to 6 AM UTC)  
    - cron: '*/120 23,0-5 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: üöÄ Ping SmartReply Backend
      run: |
        echo "üîÑ Starting keep-alive ping for SmartReply backend..."
        
        BACKEND_URL="https://smartreply-v1-backend.onrender.com"
        
        echo "üì° Pinging backend health endpoint..."
        
        START_TIME=$(date +%s%3N)
        
        # Try health endpoint first (fastest)
        if curl -sf "$BACKEND_URL/api/health" \
           -H "User-Agent: SmartReply-KeepAlive-GitHub/1.0" \
           -H "Accept: application/json" \
           --max-time 30 \
           --retry 2 \
           --retry-delay 5; then
          
          END_TIME=$(date +%s%3N)
          RESPONSE_TIME=$((END_TIME - START_TIME))
          echo "‚úÖ Health check successful! Response time: ${RESPONSE_TIME}ms"
          
        else
          echo "‚ö†Ô∏è Health endpoint failed, trying generate endpoint..."
          
          # Fallback to generate endpoint with minimal request
          if curl -sf "$BACKEND_URL/api/email/generate-reply" \
             -X POST \
             -H "Content-Type: application/json" \
             -H "User-Agent: SmartReply-KeepAlive-GitHub/1.0" \
             -d '{"emailContent":"test","tone":"professional","customPrompt":""}' \
             --max-time 45 \
             --retry 1; then
            
            END_TIME=$(date +%s%3N)
            RESPONSE_TIME=$((END_TIME - START_TIME))
            echo "‚úÖ Generate endpoint successful! Response time: ${RESPONSE_TIME}ms"
            
          else
            echo "‚ùå Both endpoints failed. Backend might be down."
            exit 1
          fi
        fi
        
        echo "üéâ Keep-alive completed successfully!"

    - name: üìä Report Status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "‚úÖ Backend is healthy and responsive"
        else
          echo "‚ùå Backend health check failed"
          echo "üîß This will trigger automatic restart on Render"
        fi
